/* automatically generated by rust-bindgen 0.61.0 */

pub const LISTINGSDB_MAX_NUM_LISTINGS_PER_ITEM: u32 = 100;
pub const LISTINGSDB_MAX_NUM_MATERIA_PER_ITEM: u32 = 5;
pub const LISTINGSDB_MAX_RETAINER_NAME_LENGTH: u32 = 24;
#[repr(C)]
#[derive(Debug, Copy, Clone, serde :: Serialize)]
pub struct ListingsDB_Listing {
    pub flags: u8,
    pub city: u8,
    pub dye_id: u16,
    pub materia_ids: [u16; 5usize],
    pub amount: u16,
    pub price_per_unit: u32,
    pub retainer_name: [u8; 24usize],
}
#[test]
fn bindgen_test_layout_ListingsDB_Listing() {
    const UNINIT: ::std::mem::MaybeUninit<ListingsDB_Listing> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ListingsDB_Listing>(),
        44usize,
        concat!("Size of: ", stringify!(ListingsDB_Listing))
    );
    assert_eq!(
        ::std::mem::align_of::<ListingsDB_Listing>(),
        4usize,
        concat!("Alignment of ", stringify!(ListingsDB_Listing))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ListingsDB_Listing),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).city) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ListingsDB_Listing),
            "::",
            stringify!(city)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dye_id) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ListingsDB_Listing),
            "::",
            stringify!(dye_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).materia_ids) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ListingsDB_Listing),
            "::",
            stringify!(materia_ids)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amount) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(ListingsDB_Listing),
            "::",
            stringify!(amount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).price_per_unit) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ListingsDB_Listing),
            "::",
            stringify!(price_per_unit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retainer_name) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ListingsDB_Listing),
            "::",
            stringify!(retainer_name)
        )
    );
}
extern "C" {
    pub fn ListingsDB_init(base_path: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn ListingsDB_shutdown();
}
extern "C" {
    pub fn ListingsDB_update_listings(
        world_id: u16,
        item_id: u16,
        num_listings: u8,
        new_listings: *const ListingsDB_Listing,
    );
}
extern "C" {
    pub fn ListingsDB_get_listings(
        world_id: u16,
        item_id: u16,
        num_listings: *mut u8,
        result: *mut ListingsDB_Listing,
        last_update_time: *mut u64,
    ) -> bool;
}
